<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simply.Property</name>
    </assembly>
    <members>
        <member name="T:Simply.Property.XmlPropertyAttribute">
            <summary>
            Описание привязки свойств класса к тегам xml-документа
            </summary>
        </member>
        <member name="P:Simply.Property.XmlPropertyAttribute.PropertyName">
            <summary>
            Свойство для идентификации, будет содержать порядок элемента в файле xml
            </summary>
        </member>
        <member name="M:Simply.Property.XmlPropertyAttribute.#ctor(System.String)">
            <summary>
            Описание привязки свойств класса к тегам xml-документа
            </summary>
            <param name="propertyName">Свойство для идентификации, будет содержать порядок элемента в файле xml</param>
        </member>
        <member name="T:Simply.Property.IPropertyScope">
            <summary>
            Класс для работы с полями класса
            </summary>
        </member>
        <member name="M:Simply.Property.IPropertyScope.GetProperties``1">
            <summary>
            Получить список полей класса
            </summary>
            <typeparam name="T">Тип класса для анализа</typeparam>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.IPropertyScope.Setter``1(``0,System.String,System.Object)">
            <summary>
            Задать значение свойства класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="item">Объект типа T</param>
            <param name="property">Свойство класса для установки значения</param>
            <param name="value">Объект, который будет назначен свойству</param>
        </member>
        <member name="M:Simply.Property.IPropertyScope.Getter``1(``0,System.String)">
            <summary>
            Получить значение свойства класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="item">Объект типа T</param>
            <param name="property">Свойство для считывания значения</param>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.IPropertyScope.Contains``1(System.String)">
            <summary>
            Содержит ли класс указанное свойство?
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="property">Наименования свойства для поиска</param>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.IPropertyScope.Get``1(System.String)">
            <summary>
            Получить свойство указанного класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="property">Наименования свойства</param>
            <returns></returns>
        </member>
        <member name="T:Simply.Property.Property">
            <summary>
            Описание свойства класса
            </summary>
        </member>
        <member name="M:Simply.Property.Property.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Создать описание свойства
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:Simply.Property.Property.IsKey">
            <summary>
            Это ключевое поле?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.IsRequired">
            <summary>
            Это обязательное для заполнения поле?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.IsIdentity">
            <summary>
            Это поле типа Identity?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.JsonIgnore">
            <summary>
            Игнорировать ли поле при сериализации или десериализации в формат json?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.NotMapped">
            <summary>
            Игнорировать ли поле при проецировании в базу данных?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.Name">
            <summary>
            Наименование поля
            </summary>
        </member>
        <member name="P:Simply.Property.Property.ColumnName">
            <summary>
            Наименование поля в базе данных
            </summary>
        </member>
        <member name="P:Simply.Property.Property.XmlProperty">
            <summary>
            Наименование поля в xml-файле
            </summary>
        </member>
        <member name="P:Simply.Property.Property.JsonProperty">
            <summary>
            Наименование поля в json-файле
            </summary>
        </member>
        <member name="P:Simply.Property.Property.MaxLength">
            <summary>
            Максимальная длинна поле, если применимо
            </summary>
        </member>
        <member name="P:Simply.Property.Property.IsValueType">
            <summary>
            Тип поля значимый или нет?
            </summary>
        </member>
        <member name="P:Simply.Property.Property.Type">
            <summary>
            Тип поля
            </summary>
        </member>
        <member name="P:Simply.Property.Property.DeclaringType">
            <summary>
            Базовый класс в котором объявлено поле
            </summary>
        </member>
        <member name="P:Simply.Property.Property.PropertyInfo">
            <summary>
            Свойства поля
            </summary>
        </member>
        <member name="T:Simply.Property.PropertyScope">
            <summary>
            Класс для работы с полями класса
            </summary>
        </member>
        <member name="M:Simply.Property.PropertyScope.GetProperties``1">
            <summary>
            Получить список полей класса
            </summary>
            <typeparam name="T">Тип класса для анализа</typeparam>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.PropertyScope.Setter``1(``0,System.String,System.Object)">
            <summary>
            Задать значение свойства класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="item">Объект типа T</param>
            <param name="property">Свойство класса для установки значения</param>
            <param name="value">Объект, который будет назначен свойству</param>
        </member>
        <member name="M:Simply.Property.PropertyScope.Getter``1(``0,System.String)">
            <summary>
            Получить значение свойства класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="item">Объект типа T</param>
            <param name="property">Свойство для считывания значения</param>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.PropertyScope.Contains``1(System.String)">
            <summary>
            Содержит ли класс указанное свойство?
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="property">Наименования свойства для поиска</param>
            <returns></returns>
        </member>
        <member name="M:Simply.Property.PropertyScope.Get``1(System.String)">
            <summary>
            Получить свойство указанного класса
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="property">Наименования свойства</param>
            <returns></returns>
        </member>
        <member name="T:Simply.Property.SynchronizedCache`2">
            <summary>
            Кэш объектов для работы в многопоточном режиме
            </summary>
            <typeparam name="Key">Тип ключа</typeparam>
            <typeparam name="Value">Тип значения</typeparam>
        </member>
        <member name="P:Simply.Property.SynchronizedCache`2.Count">
            <summary>
            Количество объктов в кэше
            </summary>
        </member>
        <member name="M:Simply.Property.SynchronizedCache`2.GetOrCreate(`0,System.Func{`1})">
            <summary>
            Возвращяет объект из кэша
            </summary>
            <param name="key">Ключ</param>
            <param name="value">Функция для создания объекта, вызывается в случае отсутствия объекта в кэше</param>
            <returns>Объект из кэша</returns>
        </member>
        <member name="M:Simply.Property.SynchronizedCache`2.Finalize">
            <summary>
            Дискриптор класса, освобождает ресурсы
            </summary>
        </member>
        <member name="T:FastExpressionCompiler.ExpressionCompiler">
            <summary>Compiles expression to delegate ~20 times faster than Expression.Compile.
            Partial to extend with your things when used as source file.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFastToIL(System.Linq.Expressions.LambdaExpression,System.Reflection.Emit.ILGenerator,System.Boolean)">
            Compiles a static method to the passed IL Generator.
            Could be used as alternative for `CompileToMethod` like this <code><![CDATA[funcExpr.CompileFastToIL(methodBuilder.GetILGenerator())]]></code>.
            Check `IssueTests.Issue179_Add_something_like_LambdaExpression_CompileToMethod.cs` for example.
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileSys``1(System.Linq.Expressions.Expression{``0})">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileSys(System.Linq.Expressions.LambdaExpression)">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{``0},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast(System.Linq.Expressions.Expression{System.Action},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Action{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/></summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompileWithPreCreatedClosure``1(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.ConstantExpression[])">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/> 
            with the provided closure object and constant expressions (or lack there of) -
            Constant expression should be the in order of Fields in closure object!
            Note 1: Use it on your own risk - FEC won't verify the expression is compile-able with passed closure, it is up to you!
            Note 2: The expression with NESTED LAMBDA IS NOT SUPPORTED!
            Note 3: `Label` and `GoTo` are not supported in this case, because they need first round to collect out-of-order labels</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompileWithoutClosure``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Tries to compile expression to "static" delegate, skipping the step of collecting the closure object.</summary>
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Type[],System.Type)">
            Obsolete
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.TryCompile(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Type[],System.Type)">
            Obsolete
        </member>
        <member name="T:FastExpressionCompiler.ExpressionCompiler.ClosureInfo">
            Track the info required to build a closure object + some context information not directly related to closure.
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo._tryCatchFinallyInfos">
            Helpers to know if a Return GotoExpression's Label should be emitted.
            First set bit is ContainsReturnGoto, the rest is ReturnLabelIndex
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo._blockStack">
            Tracks the stack of blocks where are we in emit phase
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo._labels">
            Dictionary for the used Labels in IL
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.Constants">
            Constant expressions to find an index (by reference) of constant expression from compiled expression.
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.NonPassedParameters">
            Parameters not passed through lambda parameter list But used inside lambda body.
            The top expression should Not contain not passed parameters. 
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.NestedLambdas">
            All nested lambdas recursively nested in expression
        </member>
        <member name="F:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.ConstantsAndNestedLambdasMultipleUsageCount">
            Used by `TryCollectBoundConstants` to count the multiple usages of constants to decide whether to store them in variables.
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.#ctor(FastExpressionCompiler.ExpressionCompiler.ClosureStatus,System.Object[])">
            Populates info directly with provided closure object and constants.
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Linq.Expressions.ParameterExpression)">
            LocalVar maybe a `null` in collecting phase when we only need to decide if ParameterExpression is an actual parameter or variable
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Int32[])">
            LocalVars maybe a `null` in collecting phase when we only need to decide if ParameterExpression is an actual parameter or variable
        </member>
        <member name="M:FastExpressionCompiler.ExpressionCompiler.IsClosureBoundConstant(System.Object,System.Reflection.TypeInfo)">
            Helps to identify constants as the one to be put into the Closure
        </member>
        <member name="T:FastExpressionCompiler.ExpressionCompiler.EmittingVisitor">
            <summary>Supports emitting of selected expressions, e.g. lambdaExpr are not supported yet.
            When emitter find not supported expression it will return false from <see cref="M:FastExpressionCompiler.ExpressionCompiler.EmittingVisitor.TryEmit(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Reflection.Emit.ILGenerator,FastExpressionCompiler.ExpressionCompiler.ClosureInfo@,FastExpressionCompiler.ExpressionCompiler.ParentFlags,System.Int32)"/>, so I could fallback
            to normal and slow Expression.Compile.</summary>
        </member>
        <member name="T:FastExpressionCompiler.ILGeneratorHacks">
            Hey
        </member>
        <member name="M:FastExpressionCompiler.ILGeneratorHacks.CompileGetNextLocalVarIndex">
            Not allocating the LocalBuilder class
            emitting this:
            il.m_localSignature.AddArgument(type);
            return PostInc(ref il.LocalCount);
        </member>
        <member name="F:FastExpressionCompiler.ILGeneratorHacks.LocalSignatureField">
            Get via reflection
        </member>
        <member name="F:FastExpressionCompiler.ILGeneratorHacks.LocalCountField">
            Get via reflection
        </member>
        <member name="F:FastExpressionCompiler.ILGeneratorHacks.AddArgumentMethod">
            Get via reflection
        </member>
        <member name="M:FastExpressionCompiler.ILGeneratorHacks.GetNextLocalVarIndex(System.Reflection.Emit.ILGenerator,System.Type)">
            Does the job
        </member>
    </members>
</doc>
